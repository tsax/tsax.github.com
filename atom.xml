<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tushar's Blog]]></title>
  <link href="http://www.tusharsaxena.com/atom.xml" rel="self"/>
  <link href="http://www.tusharsaxena.com/"/>
  <updated>2016-03-26T22:30:38-04:00</updated>
  <id>http://www.tusharsaxena.com/</id>
  <author>
    <name><![CDATA[Tushar Saxena]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NodeProgram in March, NYC]]></title>
    <link href="http://www.tusharsaxena.com/blog/2016/03/14/nodeprogram-in-march/"/>
    <updated>2016-03-14T20:18:00-04:00</updated>
    <id>http://www.tusharsaxena.com/blog/2016/03/14/nodeprogram-in-march</id>
    <content type="html"><![CDATA[<p>The <a href="http://nodeprogram.com/"><em>NodeProgram</em></a> weekend workshop taught by <a href="http://azat.co/">Azat Mardan</a> was very well done. It was fast-paced and took no prisoners - not just familiarity but a minimal fluency with Javascript was assumed and required to keep up with the presentations and the exercises. I decided to attend both days of the weekend for a combined Sat+Sun of React and Node goodness. How else to productively spend a weekend?</p>

<h2>Saturday : React </h2>

<p>Saturday was devoted to <em>React.js</em> which I only had a passing familiarity with through osmosis (Hacker News, other fora). React is a very interesting model of front-end development and I thank Azat for helping me grok its fundamental nature - that of <em>composability</em> - the ability to compose components out of other components in a modular fashion. The urge to update the DOM through a quick jQuery function still nags my brain and will have to be trained out thru repeated React usage. We ended up working on <a href="http://nodeschool.io">Nodeschool</a> <a href="https://github.com/tako-black/learnyoureact">‘learnyoureact’</a> workshop between presentations of theoretical explanations. Mentors were available to assist people with their challenges and Azat walked around helping a lot as well. There was a supplementary presentation on React Native, which I paid minimal attention to as I’m not currently focused on building mobile apps and even when I play around with Swift on iOS, it’s good to have a solid understanding of a platform before (potentially) ruining one’s understanding with frameworks.</p>

<h2>Sunday : Node</h2>

<p>Azat emphasized repeatedly the <em>asynchronous</em> nature of <em>Node.js</em>, which was our topic for Sunday. The format of the day was similar to Saturday’s with working on <a href="http://nodeschool.io">Nodeschool</a> workshops (<a href="https://www.github.com/workshopper/learnyounode">learnyounode</a>, <a href="https://github.com/azat-co/expressworks">ExpressWorks</a>, <a href="https://github.com/evanlucas/learnyoumongo">learnyoumongo</a>) interspersed with theory and explanations of Node.js, Express.js and the usage of MongoDB with Node and Express. As I’d earlier played around with Node back in 2012 (but, regrettably hadn’t followed it through to a major project), I was aware of some of the basics but Azat’s explanations solidified my understanding and I’m excited to build on top of my newly acquired knowledge.</p>

<p>I find it worthwhile to mention that Azat has a personality. He not only delivers good presentations and helps with one&#8217;s code, but also describes various scientifically tested learning strategies such as spaced repetition. He clearly keeps up with the learning geekosphere online! He also took the liberty of filling the &#8216;space&#8217; in our spaced repetition with a quick foray to introduce meditation! Enjoyable and unique.</p>

<p>Overall, NodeProgram has reinforced my belief in hard, weekend workshops - it&#8217;s the ideal way to get a quick, rigorous introduction to a new technology - far more sticky in my mind than going through a dozen tutorials online. One can&#8217;t discount the serendipity of meeting great people either.</p>

<h2>Addendum</h2>

<p>Speaking of Javascript, I recently across this surrealist talk delivered by Gary Bernhardt titled <a href="https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript">The Birth and Death of Javascript</a>. The futuristic retrospection delivered by Bernhardt is superb and truly mind-bending. It uses the mechanism of comedy to sneak in some pretty radical but feasible ideas for the evolution of Javascript and all programming 25 years from now. Do watch it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pecunia Nunc is Live!]]></title>
    <link href="http://www.tusharsaxena.com/blog/2013/07/01/pecunia-nunc-is-live/"/>
    <updated>2013-07-01T22:02:00-04:00</updated>
    <id>http://www.tusharsaxena.com/blog/2013/07/01/pecunia-nunc-is-live</id>
    <content type="html"><![CDATA[<p>A few months ago, I came across this:</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p>Anyone interested in working <a href="https://twitter.com/kickstarter">@kickstarter</a> I bet if you implemented <a href="https://twitter.com/peterc">@peterc</a> great idea that&#39;d be a leg up :-) <a href="https://t.co/bdqc9Ep7">https://t.co/bdqc9Ep7</a></p>&mdash; Avi Flombaum (@aviflombaum) <a href="https://twitter.com/aviflombaum/statuses/280470459059933186">December 17, 2012</a></blockquote>
<script async src="http://www.tusharsaxena.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>The link in the above tweet was to this:</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p>I&#39;d subscribe to a daily newsletter that alerted me to interesting Kickstarters ending today &amp; are funded (or close to it). Do it, KS! :)</p>&mdash; Peter Cooper (@peterc) <a href="https://twitter.com/peterc/statuses/280470229094637568">December 17, 2012</a></blockquote>
<script async src="http://www.tusharsaxena.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>As I was and am interested in working for Kickstarter, and was looking to shore up my portfolio, particularly with Ruby projects, I decided to take on the project.</p>

<p>After many false starts, I present to you&#8230;<em>drum roll please</em>&#8230;</p>

<p><a href="http://pecunia-nunc.herokuapp.com"><strong>Pecunia Nunc</strong></a></p>

<p>The idea is to send a daily digest of Kickstarter projects that fit a certain criteria to subscribers, such as
- The projects are close to the finish line (>80% of goal funded)
- The projects are ending soon (within 48 hours)</p>

<p>I believe this will enable Kickstarter enthusiasts who don&#8217;t have time to browse the many interesting, worthy projects regularly to fund them when they most need help. Scanning the email in the morning takes 10-15 seconds, or more if you happen to find a project to like.</p>

<p>I hope I&#8217;ve fulfiled a need.
If not, there&#8217;s always next time.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm Not a Spammer]]></title>
    <link href="http://www.tusharsaxena.com/blog/2013/04/09/im-not-a-spammer/"/>
    <updated>2013-04-09T02:05:00-04:00</updated>
    <id>http://www.tusharsaxena.com/blog/2013/04/09/im-not-a-spammer</id>
    <content type="html"><![CDATA[<p>For my current side-project, I need to send emails to a list of people whose email addresses are stored in the database. My concern, as you can imagine, is to prevent spamming my users in instances of error or otherwise. There&#8217;s several ways to do this. As usual, it comes down to a choice - a judgement call from among the many choices.</p>

<ol>
<li>Creating an emails model to keep track of when an email was sent and to whom.</li>
<li>Storing the last time a user received an email in the user model.</li>
</ol>


<p>You can think of many others ways to do this of course.
I decided to go with the second option as it required minimal effort and has so far turned out
very well. This was accomplished with a single <code>rails generate migration AddLastEmailToSubscribers last_email:datetime</code>.</p>

<p>This will create the following migration</p>

<figure class='code'><figcaption><span>AddLastEmailToSubscribers</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AddLastEmailToSubscribers</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">add_column</span> <span class="ss">:subscribers</span><span class="p">,</span> <span class="ss">:last_email</span><span class="p">,</span> <span class="ss">:datetime</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>From here, I can simply check if the :last_email is nil or a day before today&#8217;s,
and if so, then send the day&#8217;s email, and then update the last_email to <code>Time.now</code></p>

<p>Simple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Down with the Sickness]]></title>
    <link href="http://www.tusharsaxena.com/blog/2013/04/03/down-with-the-sickness/"/>
    <updated>2013-04-03T23:30:00-04:00</updated>
    <id>http://www.tusharsaxena.com/blog/2013/04/03/down-with-the-sickness</id>
    <content type="html"><![CDATA[<p>This is me for the past week</p>

<p><img src="http://westfieldcomics.com/blog/wp-content/uploads/2010/04/Sick-man-in-bed.jpg" title="[sickk[still sick!]]" ></p>

<p>Really need to get a lot of work done including all the side projects, but gah sometimes biology comes in the way. Damn you Rotavirus.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redirect_to and preservation of errors]]></title>
    <link href="http://www.tusharsaxena.com/blog/2013/03/25/redirect-to-and-preservation-of-errors/"/>
    <updated>2013-03-25T00:38:00-04:00</updated>
    <id>http://www.tusharsaxena.com/blog/2013/03/25/redirect-to-and-preservation-of-errors</id>
    <content type="html"><![CDATA[<p>Working on my side project, <a href="https://github.com/tsax/pecunia-nunc/">Pecunia-Nunc</a>, I was baffled when the errors on the object creation form would not display upon submission. The controller looked like this</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SubscribersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;digest&#39;</span>
</span><span class='line'>  <span class="vi">@subscriber</span> <span class="o">=</span> <span class="no">Subscriber</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:subscriber</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@subscriber</span><span class="o">.</span><span class="n">token</span> <span class="o">=</span> <span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA1</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="o">[</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="nb">rand</span><span class="o">].</span><span class="n">join</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@subscriber</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Thanks for signing-up. Please confirm your email address through the email that&#39;ll be in your inbox shortly!&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">home_path</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;There were errors! Please resubmit after making corrections.&quot;</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">home_path</span>
</span><span class='line'>  <span class="k">end</span>  
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The view :</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">&lt;</span><span class="sx">% if </span><span class="vi">@subscriber</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">any?</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;div id=&quot;error_explanation&quot;&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;alert alert-error&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="no">The</span> <span class="n">form</span> <span class="n">contains</span> <span class="o">&lt;</span><span class="sx">%= pluralize(@subscriber.errors.count, &quot;error&quot;) %&gt;.</span>
</span><span class='line'><span class="sx">    &lt;/div&gt;</span>
</span><span class='line'><span class="sx">    &lt;ul&gt;</span>
</span><span class='line'><span class="sx">    &lt;% @subscriber.errors.full_messages.each do |msg| %&gt;</span>
</span><span class='line'><span class="sx">      &lt;li&gt;* &lt;%=</span> <span class="n">msg</span> <span class="sx">%&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx">    &lt;/ul&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span><span class='line'><span class="sr">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can tell, the problem was not in the view at all, but in this line <code>redirect_to home_path</code>. Redirection clears the object.errors field, and therefore nothing was being displayed. I stupidly spent a lot of time fiddling with the view, instead of inspecting the controller action. Replacing the problematic line with <code>render 'new'</code> (&#8216;new&#8217; is the action/view that renders the form) solved the problem by preserving the .errors object.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Me Encanta Duolingo!]]></title>
    <link href="http://www.tusharsaxena.com/blog/2013/02/19/me-encanta-duolingo/"/>
    <updated>2013-02-19T00:23:00-05:00</updated>
    <id>http://www.tusharsaxena.com/blog/2013/02/19/me-encanta-duolingo</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been playing with <a href="http://www.duolingo.com">Duolingo</a> for around a month, specifically with the Spanish module. It&#8217;s absolutely fantastic. I&#8217;d signed up for an invitation back in the day as I tend to sign up for any new startups or services I think may be cool to try out. I had as much interest in learning Spanish at this time as I do in learning to bake, which is in the category of &#8216;it&#8217;d be nice but i have other things to do.&#8217; Since trying it out, I&#8217;ve been totally hooked! The feeling engendered by the act of proper recollection is deeply satisfying. I can&#8217;t say I recall much of anything I learned in French or Arabic classes back in school and I did those for 2 and 3 yrs respectively. But I was able to recall words, sentences and even basic verb conjugations just two days after starting Duolingo.</p>

<p>So, if you have any interest at all in learning Spanish, French, Italian, German or Portuguese (these are the available modules currently), click over to <a href="http://www.duolingo.com">Duolingo</a>, you&#8217;ll thank me later.</p>

<p>Oh, did I mention it&#8217;s absolutely free?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pow environment variable trouble]]></title>
    <link href="http://www.tusharsaxena.com/blog/2013/02/15/pow-environment-variable-trouble/"/>
    <updated>2013-02-15T01:57:00-05:00</updated>
    <id>http://www.tusharsaxena.com/blog/2013/02/15/pow-environment-variable-trouble</id>
    <content type="html"><![CDATA[<p>I was caught up in excitement upon discovering <a href="http://pow.cx">pow</a>. After setting it up, and testing it out on the project I&#8217;m working on now, I encountered a problem. My app is setup to send email using Gmail thru SMTP configured in a Rails environment config, and the email is sent using ActionMailer.</p>

<p>The config looks like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>address: "smtp.gmail.com",
</span><span class='line'>port: 587,
</span><span class='line'>user_name: ENV["GMAIL_USERNAME"],
</span><span class='line'>password: ENV["GMAIL_PASSWORD"],
</span><span class='line'>authentication: :login
</span></code></pre></td></tr></table></div></figure>


<p>  The emails were arriving when I tested the app by running <code>rails server</code> but on the local pow server, authentication errors were the norm. Clearly the environment variables weren&#8217;t being set. So I googled pow&#8217;s documentation for how to setup environment variables, ending up on <a href="http://pow.cx/manual.html#section_2.2">this page</a>. While reading through the linked section, I missed something critical.</p>

<p>  &#8220;Pow attempts to execute two scripts — first .powrc, then .powenv — <strong>in the application&#8217;s root</strong>. Any environment variables exported from these scripts are passed along to Rack.&#8221;</p>

<p>  So I idiotically set about creating a .powrc file in my user/bin directory. Obviously this did not work, but I wasted an hour or so tweaking random settings trying to get this to work. Then I re-read the page, set about to fix the problem, which I did as follows.</p>

<ol>
<li>Run <code>touch .powrc</code> in my project&#8217;s root.</li>
<li>Edit .powrc and add the environment variables as follows:
<code>
export GMAIL_USERNAME=username
export GMAIL_PASSWORD="my password"
</code></li>
<li>Restart pow&#8217;s worker for the app by running
<code>touch tmp/restart.txt</code></li>
</ol>


<p>  And that worked!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bam! Pow!]]></title>
    <link href="http://www.tusharsaxena.com/blog/2013/02/14/bam-pow/"/>
    <updated>2013-02-14T18:13:00-05:00</updated>
    <id>http://www.tusharsaxena.com/blog/2013/02/14/bam-pow</id>
    <content type="html"><![CDATA[<p><a href="http://37signals.com/svn/posts/3191-announcing-pow-040-with-xipio-support">Pow is awesome</a></p>

<p><img src="http://mahoutofu.files.wordpress.com/2012/11/pow.jpg" width="250" height="250"></p>

<p>I understood the obsessive focus of talented hackers on customizing and shortening every part of the development workflow, including reducing one word (5 letter) commands to 2 letter commands, in an intellectual manner, but I hadn&#8217;t <em>felt</em> it, till I started experimenting with Rails development. Typing <code>rails s</code> every minute can get old. This is where <a href="http://pow.cx/">pow</a> along with <a href="https://github.com/Rodreegez/powder">powder</a> have been awesome. Now when I create a new rails app, I just run
<code>powder link</code> to create a pow dev server for my app. Now, whenever I feel like testing out my app in the browser, I just launch <code>powder open</code> and the app is served in the browser. This replaces launching the rails server, followed by switching to the server and navigating to localhost:3000.</p>

<p>So, I want to end by thanking the 37Signals dev team, along with Adam Rogers and Phil Nash for making my life easier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nature's Complexity, Human Incomprehension]]></title>
    <link href="http://www.tusharsaxena.com/blog/2013/01/29/natures-complexity-human-incomprehension/"/>
    <updated>2013-01-29T17:54:00-05:00</updated>
    <id>http://www.tusharsaxena.com/blog/2013/01/29/natures-complexity-human-incomprehension</id>
    <content type="html"><![CDATA[<p>From the Enlightenment onwards, we humans have betrayed a supreme confidence in our ability to read, interpret, deconstruct and ultimately triumph over the natural world using nothing but our faculties of reason, through their manifestations in science, technology and philosophy.</p>

<p>Okay that sounded way too high-brow. Nonetheless, I just came across <a href="http://highscalability.com/blog/2012/4/9/why-my-slime-mold-is-better-than-your-hadoop-cluster.html">this awe-inspiring post</a> at High Scalability.</p>

<p>A creature as &#8216;simple&#8217; as a slime mold is capable of amazing feats of computation by following simple rules that Nature has granted it through evolution. I don&#8217;t know whether scientists have deconstructed slime molds down to individual proteins and built up a whole model of it, though that seems unlikely and complex. And that&#8217;s the point! The organization and structure of a slime mold, though simple compared to multi-cellular organisms like us, is still extremely complex for our minds to deconstruct through observation and reason. There&#8217;s logic embedded in the structural complexity of the natural world not wholly visible to us.</p>

<p>Since I haven&#8217;t yet tried &#8216;genetic programming,&#8217; I don&#8217;t know how effective it is in adopting nature&#8217;s solutions to some computation problems, nonetheless I should give it a shot sometime, perhaps using <a href="http://hackershelf.com/book/5/clever-algorithms/">this book on HackerShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning, muscle memory, typing]]></title>
    <link href="http://www.tusharsaxena.com/blog/2013/01/20/learning-muscle-memory-typing/"/>
    <updated>2013-01-20T16:39:00-05:00</updated>
    <id>http://www.tusharsaxena.com/blog/2013/01/20/learning-muscle-memory-typing</id>
    <content type="html"><![CDATA[<p>Going through Zed Shaw&#8217;s <a href="http://ruby.learncodethehardway.org/book/">Learn Ruby the Hard Way</a>, I now recognize the importance of typing in the context of learning to program a new language. My professional experience in software development consisted of .NET development in C#, which is extremely similar to JAVA in syntax. So, upon encountering Ruby syntax elements such as pipes &#8216;|&#8217;, typing the code becomes slow due to a lack of practice, which impedes and constricts thinking.</p>

<figure class='code'><figcaption><span>Exercise 12: Libraries</span><a href='http://ruby.learncodethehardway.org/book/ex12.html'>Source Article</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">open</span><span class="p">(</span><span class="s2">&quot;http://www.ruby-lang.org/en&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">each_line</span> <span class="p">{</span><span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="nb">p</span> <span class="n">line</span><span class="p">}</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">f</span><span class="o">.</span><span class="n">base_uri</span>         <span class="c1"># &lt;URI::HTTP:0x40e6ef2 URL:http://www.ruby-lang.org/en/&gt;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">f</span><span class="o">.</span><span class="n">content_type</span>     <span class="c1"># &quot;text/html&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">f</span><span class="o">.</span><span class="n">charset</span>          <span class="c1"># &quot;iso-8859-1&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">f</span><span class="o">.</span><span class="n">content_encoding</span> <span class="c1"># []</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">f</span><span class="o">.</span><span class="n">last_modified</span>    <span class="c1"># Thu Dec 05 02:45:02 UTC 2002</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Typing code like the excerpt above has developed muscle memory for me, and made me think of solutions faster, just as Zed said it would.</p>

<p>Happy typing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BRB]]></title>
    <link href="http://www.tusharsaxena.com/blog/2013/01/15/brb/"/>
    <updated>2013-01-15T02:39:00-05:00</updated>
    <id>http://www.tusharsaxena.com/blog/2013/01/15/brb</id>
    <content type="html"><![CDATA[<p>BRB, learning Ruby&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://www.tusharsaxena.com/blog/2013/01/10/hello-world/"/>
    <updated>2013-01-10T20:18:00-05:00</updated>
    <id>http://www.tusharsaxena.com/blog/2013/01/10/hello-world</id>
    <content type="html"><![CDATA[<p>Hello World! I&#8217;m baaaaaackk.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retina Aches]]></title>
    <link href="http://www.tusharsaxena.com/blog/2012/07/27/retina-aches/"/>
    <updated>2012-07-27T16:50:00-04:00</updated>
    <id>http://www.tusharsaxena.com/blog/2012/07/27/retina-aches</id>
    <content type="html"><![CDATA[<p><img src="https://tusharsaxena.files.wordpress.com/2012/07/apple_15inch_macbook_pro_with_retina_display_1218250_g11.jpg?w=692&h=468"></p>

<p>I wonder if any other MacBook Pro with Retina display owners have noticed tiring of the eyes to a further extent than regular laptops (including MacBooks). There seems to be more of an intense focus engendered by the Retina screen. The closest analogue I can think of is maybe watching a 3D movie.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start-up Tour – 10gen]]></title>
    <link href="http://www.tusharsaxena.com/blog/2012/07/26/start-up-tour-10gen/"/>
    <updated>2012-07-26T20:18:00-04:00</updated>
    <id>http://www.tusharsaxena.com/blog/2012/07/26/start-up-tour-10gen</id>
    <content type="html"><![CDATA[<p>Attended a fun event called <a href="http://www.meetup.com/StartupTour/">“Start-up Tour.”</a> This involved visiting the offices of 10gen, Thrillist and Foursquare. They shoved tons of food down our throat. I was impressed with the quality of the food. As a participant in the tech scene, one’s culinary choice is often limited to pizza and beer but in this instance we were treated to high quality charcuterie at 10gen and decent taco fillings at Foursquare.</p>

<p><strong>Presentations</strong>
All the presentations came across as genuine without many marketing phrases that such events are usually full of.</p>

<ul>
<li>10gen</li>
</ul>


<p>The slide deck presenting Mongo was only partially informative. Many people who have no clue what <a href="http://en.wikipedia.org/wiki/NoSQL">‘NoSQL‘</a> actually means would not have understood ‘document storage’ vs relational databases either. Some code samples would have helped.</p>

<p>Tyler Brock, who is responsible for the Ruby driver for MongoDB delivered the presentation. Incidentally, I’d just attended the NYC.rb Hackfest meetup the previous day where I’d met a cool dude named <a href="http://bent-cardan.com/info/">Bent Cardan</a> who helped me get my new MacBook Pro setup with ZSH and iTerm and gave me a full demo of agile hacking on rails with Mongomapper which is an open source community-developed ORM/ODM for MongoDB. This prompted me to ask Tyler whether an ‘official’ ODM solution was on the way for MongoDB on Rails/Ruby. Interestingly enough, Tyler mentioned that he wanted to do an ODM and that since he’s in charge of Ruby driver dev, it would probably happen though not anytime soon.</p>

<ul>
<li>Thrillist</li>
</ul>


<p>I was surprised that the presentation had no screenshot of Thrillist or JackThreads sites as they are very hip and cool and people unaware of them would certainly have enjoyed them. The description of the various Thrillist sites was mostly abstract with very few examples thrown in.</p>

<p>This was followed by an enjoyably geeky description of the workflow and design process of a recent project within the company that involved handling user data on the various Thrillist Media sites. Detailed block diagrams illustrated the way they’d used lots of components – MongoDB, Redis, MySQL, nginx/unicorn, etc. I was hooked! My takeaway was the line, which I paraphrase as “When you are creating a universal API, everyone’s your enemy.” A succinct crystallization of the issue of defensive programming.</p>

<ul>
<li>Foursquare</li>
</ul>


<p>This presentation was the most statistics-heavy. Details included number of user check-ins and venues among others and the numbers were impressive. The CTO was the presenter and he gave us an overview of the scaling challenges that Foursquare faces. The part I found interesting was when he mentioned that since all history of  a user’s activity is important in the future, the scaling challenges are very different from, say, Facebook or Twitter where past tweets or messages are mostly not accessed at all.</p>

<p><strong>Offices</strong></p>

<p>All the offices were open-space as expected but each had a different feel to it.</p>

<p>The 10gen offices felt linear and uncluttered. It was basically a rectangular layout with window views of SoHo on each end. A decent amount of natural light.</p>

<p>Thrillist offices felt like giant male dorm rooms with crazy posters including those of semi-naked girls on the walls, funny artifacts thrown about everywhere and a collegial atmosphere.</p>

<p>Foursquare’s main lobby is an atrium with very high skylights. The conference rooms are boxed inside very glossy um glass and hold iPads next to the doors with the schedule information. Overall the offices felt airy and calm but perhaps the Zen-like affects were due to the relative emptiness of the place.</p>

<p><strong>People</strong></p>

<p>An eclectic mix of people attended, though only eclectic in the tech scene not in a universal sense. Ran into a few people I know including a friend. The Thrillist people seemed to be the most laid back. 10gen technologists oozed C++ (hard to explain) while Foursquare devs looked like determined project deathmarchers.</p>

<p>Overall, a fun and interesting experience, highly recommended!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[puts 'Hello World']]></title>
    <link href="http://www.tusharsaxena.com/blog/2012/06/21/puts-hello-world/"/>
    <updated>2012-06-21T22:16:00-04:00</updated>
    <id>http://www.tusharsaxena.com/blog/2012/06/21/puts-hello-world</id>
    <content type="html"><![CDATA[<p>I just thought it’s time to get online in a serious way and document my journey as I learn new programming languages, frameworks and tools. Also expect an odd thought or two on economics.</p>
]]></content>
  </entry>
  
</feed>
