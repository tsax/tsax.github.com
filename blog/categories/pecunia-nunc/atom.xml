<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pecunia-nunc | Tushar's Blog]]></title>
  <link href="http://www.tusharsaxena.com/blog/categories/pecunia-nunc/atom.xml" rel="self"/>
  <link href="http://www.tusharsaxena.com/"/>
  <updated>2016-03-26T22:30:41-04:00</updated>
  <id>http://www.tusharsaxena.com/</id>
  <author>
    <name><![CDATA[Tushar Saxena]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pecunia Nunc is Live!]]></title>
    <link href="http://www.tusharsaxena.com/blog/2013/07/01/pecunia-nunc-is-live/"/>
    <updated>2013-07-01T22:02:00-04:00</updated>
    <id>http://www.tusharsaxena.com/blog/2013/07/01/pecunia-nunc-is-live</id>
    <content type="html"><![CDATA[<p>A few months ago, I came across this:
{% tweet https://twitter.com/aviflombaum/status/280470459059933186 %}
The link in the above tweet was to this:
{% tweet https://twitter.com/peterc/status/280470229094637568 %}</p>

<p>As I was and am interested in working for Kickstarter, and was looking to shore up my portfolio, particularly with Ruby projects, I decided to take on the project.</p>

<p>After many false starts, I present to you...<em>drum roll please</em>...</p>

<p><a href="http://pecunia-nunc.herokuapp.com"><strong>Pecunia Nunc</strong></a></p>

<p>The idea is to send a daily digest of Kickstarter projects that fit a certain criteria to subscribers, such as
- The projects are close to the finish line (>80% of goal funded)
- The projects are ending soon (within 48 hours)</p>

<p>I believe this will enable Kickstarter enthusiasts who don't have time to browse the many interesting, worthy projects regularly to fund them when they most need help. Scanning the email in the morning takes 10-15 seconds, or more if you happen to find a project to like.</p>

<p>I hope I've fulfiled a need.
If not, there's always next time.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm Not a Spammer]]></title>
    <link href="http://www.tusharsaxena.com/blog/2013/04/09/im-not-a-spammer/"/>
    <updated>2013-04-09T02:05:00-04:00</updated>
    <id>http://www.tusharsaxena.com/blog/2013/04/09/im-not-a-spammer</id>
    <content type="html"><![CDATA[<p>For my current side-project, I need to send emails to a list of people whose email addresses are stored in the database. My concern, as you can imagine, is to prevent spamming my users in instances of error or otherwise. There's several ways to do this. As usual, it comes down to a choice - a judgement call from among the many choices.</p>

<ol>
<li>Creating an emails model to keep track of when an email was sent and to whom.</li>
<li>Storing the last time a user received an email in the user model.</li>
</ol>


<p>You can think of many others ways to do this of course.
I decided to go with the second option as it required minimal effort and has so far turned out
very well. This was accomplished with a single <code>rails generate migration AddLastEmailToSubscribers last_email:datetime</code>.</p>

<p>This will create the following migration
``` ruby AddLastEmailToSubscribers
class AddLastEmailToSubscribers &lt; ActiveRecord::Migration
  def change</p>

<pre><code>add_column :subscribers, :last_email, :datetime
</code></pre>

<p>  end
end</p>

<p><code>
From here, I can simply check if the :last_email is nil or a day before today's,
and if so, then send the day's email, and then update the last_email to</code>Time.now```</p>

<p>Simple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redirect_to and preservation of errors]]></title>
    <link href="http://www.tusharsaxena.com/blog/2013/03/25/redirect-to-and-preservation-of-errors/"/>
    <updated>2013-03-25T00:38:00-04:00</updated>
    <id>http://www.tusharsaxena.com/blog/2013/03/25/redirect-to-and-preservation-of-errors</id>
    <content type="html"><![CDATA[<p>Working on my side project, <a href="https://github.com/tsax/pecunia-nunc/">Pecunia-Nunc</a>, I was baffled when the errors on the object creation form would not display upon submission. The controller looked like this</p>

<p>{% codeblock lang:ruby%}
class SubscribersController &lt; ApplicationController</p>

<p>def new</p>

<pre><code>require 'digest'
@subscriber = Subscriber.new(params[:subscriber])
@subscriber.token = Digest::SHA1.hexdigest([Time.now, rand].join)
if @subscriber.save
    flash[:notice] = "Thanks for signing-up. Please confirm your email address through the email that'll be in your inbox shortly!"

    redirect_to home_path
else
    flash[:notice] = "There were errors! Please resubmit after making corrections."
    redirect_to home_path
end 
</code></pre>

<p>end
...
{% endcodeblock %}</p>

<p>The view :
{% codeblock lang:ruby%}
  &lt;% if @subscriber.errors.any? %>
  <div id="error_explanation"></p>

<pre><code>&lt;div class="alert alert-error"&gt;
  The form contains &lt;%= pluralize(@subscriber.errors.count, "error") %&gt;.
&lt;/div&gt;
&lt;ul&gt;
&lt;% @subscriber.errors.full_messages.each do |msg| %&gt;
  &lt;li&gt;* &lt;%= msg %&gt;&lt;/li&gt;
&lt;% end %&gt;
&lt;/ul&gt;
</code></pre>

<p>  </div>
&lt;% end %>
{% endcodeblock %}</p>

<p>As you can tell, the problem was not in the view at all, but in this line <code>redirect_to home_path</code>. Redirection clears the object.errors field, and therefore nothing was being displayed. I stupidly spent a lot of time fiddling with the view, instead of inspecting the controller action. Replacing the problematic line with <code>render 'new'</code> ('new' is the action/view that renders the form) solved the problem by preserving the .errors object.</p>
]]></content>
  </entry>
  
</feed>
