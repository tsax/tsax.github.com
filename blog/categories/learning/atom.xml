<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: learning | Tushar's Blog]]></title>
  <link href="http://www.tusharsaxena.com/blog/categories/learning/atom.xml" rel="self"/>
  <link href="http://www.tusharsaxena.com/"/>
  <updated>2016-03-25T01:03:17-04:00</updated>
  <id>http://www.tusharsaxena.com/</id>
  <author>
    <name><![CDATA[Tushar Saxena]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NodeProgram in March, NYC]]></title>
    <link href="http://www.tusharsaxena.com/blog/2016/03/14/nodeprogram-in-march/"/>
    <updated>2016-03-14T20:18:00-04:00</updated>
    <id>http://www.tusharsaxena.com/blog/2016/03/14/nodeprogram-in-march</id>
    <content type="html"><![CDATA[<p>The <a href="http://nodeprogram.com/"><em>NodeProgram</em></a> weekend workshop taught by <a href="http://azat.co/">Azat Mardan</a> was very well done. It was fast-paced and took no prisoners - not just familiarity but a minimal fluency with Javascript was assumed and required to keep up with the presentations and the exercises. I decided to attend both days of the weekend for a combined Sat+Sun of React and Node goodness. How else to productively spend a weekend?</p>

<h2>Saturday : React </h2>

<p>Saturday was devoted to <em>React.js</em> which I only had a passing familiarity with through osmosis (Hacker News, other fora). React is a very interesting model of front-end development and I thank Azat for helping me grok its fundamental nature - that of <em>composability</em> - the ability to compose components out of other components in a modular fashion. The urge to update the DOM through a quick jQuery function still nags my brain and will have to be trained out thru repeated React usage. We ended up working on <a href="http://nodeschool.io">Nodeschool</a> <a href="https://github.com/tako-black/learnyoureact">‘learnyoureact’</a> workshop between presentations of theoretical explanations. Mentors were available to assist people with their challenges and Azat walked around helping a lot as well. There was a supplementary presentation on React Native, which I paid minimal attention to as I’m not currently focused on building mobile apps and even when I play around with Swift on iOS, it’s good to have a solid understanding of a platform before (potentially) ruining one’s understanding with frameworks.</p>

<h2>Sunday : Node</h2>

<p>Azat emphasized repeatedly the <em>asynchronous</em> nature of <em>Node.js</em>, which was our topic for Sunday. The format of the day was similar to Saturday’s with working on <a href="http://nodeschool.io">Nodeschool</a> workshops (<a href="https://www.github.com/workshopper/learnyounode">learnyounode</a>, <a href="https://github.com/azat-co/expressworks">ExpressWorks</a>, <a href="https://github.com/evanlucas/learnyoumongo">learnyoumongo</a>) interspersed with theory and explanations of Node.js, Express.js and the usage of MongoDB with Node and Express. As I’d earlier played around with Node back in 2012 (but, regrettably hadn’t followed it through to a major project), I was aware of some of the basics but Azat’s explanations solidified my understanding and I’m excited to build on top of my newly acquired knowledge.</p>

<p>I find it worthwhile to mention that Azat has a personality. He not only delivers good presentations and helps with one's code, but also describes various scientifically tested learning strategies such as spaced repetition. He clearly keeps up with the learning geekosphere online! He also took the liberty of filling the 'space' in our spaced repetition with a quick foray to introduce meditation! Enjoyable and unique.</p>

<p>Overall, NodeProgram has reinforced my belief in hard, weekend workshops - it's the ideal way to get a quick, rigorous introduction to a new technology - far more sticky in my mind than going through a dozen tutorials online. One can't discount the serendipity of meeting great people either.</p>

<h2>Addendum</h2>

<p>Speaking of Javascript, I recently across this surrealist talk delivered by Gary Bernhardt titled <a href="https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript">The Birth and Death of Javascript</a>. The futuristic retrospection delivered by Bernhardt is superb and truly mind-bending. It uses the mechanism of comedy to sneak in some pretty radical but feasible ideas for the evolution of Javascript and all programming 25 years from now. Do watch it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm Not a Spammer]]></title>
    <link href="http://www.tusharsaxena.com/blog/2013/04/09/im-not-a-spammer/"/>
    <updated>2013-04-09T02:05:00-04:00</updated>
    <id>http://www.tusharsaxena.com/blog/2013/04/09/im-not-a-spammer</id>
    <content type="html"><![CDATA[<p>For my current side-project, I need to send emails to a list of people whose email addresses are stored in the database. My concern, as you can imagine, is to prevent spamming my users in instances of error or otherwise. There's several ways to do this. As usual, it comes down to a choice - a judgement call from among the many choices.</p>

<ol>
<li>Creating an emails model to keep track of when an email was sent and to whom.</li>
<li>Storing the last time a user received an email in the user model.</li>
</ol>


<p>You can think of many others ways to do this of course.
I decided to go with the second option as it required minimal effort and has so far turned out
very well. This was accomplished with a single <code>rails generate migration AddLastEmailToSubscribers last_email:datetime</code>.</p>

<p>This will create the following migration
``` ruby AddLastEmailToSubscribers
class AddLastEmailToSubscribers &lt; ActiveRecord::Migration
  def change</p>

<pre><code>add_column :subscribers, :last_email, :datetime
</code></pre>

<p>  end
end</p>

<p><code>
From here, I can simply check if the :last_email is nil or a day before today's,
and if so, then send the day's email, and then update the last_email to</code>Time.now```</p>

<p>Simple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Me Encanta Duolingo!]]></title>
    <link href="http://www.tusharsaxena.com/blog/2013/02/19/me-encanta-duolingo/"/>
    <updated>2013-02-19T00:23:00-05:00</updated>
    <id>http://www.tusharsaxena.com/blog/2013/02/19/me-encanta-duolingo</id>
    <content type="html"><![CDATA[<p>I've been playing with <a href="http://www.duolingo.com">Duolingo</a> for around a month, specifically with the Spanish module. It's absolutely fantastic. I'd signed up for an invitation back in the day as I tend to sign up for any new startups or services I think may be cool to try out. I had as much interest in learning Spanish at this time as I do in learning to bake, which is in the category of 'it'd be nice but i have other things to do.' Since trying it out, I've been totally hooked! The feeling engendered by the act of proper recollection is deeply satisfying. I can't say I recall much of anything I learned in French or Arabic classes back in school and I did those for 2 and 3 yrs respectively. But I was able to recall words, sentences and even basic verb conjugations just two days after starting Duolingo.</p>

<p>So, if you have any interest at all in learning Spanish, French, Italian, German or Portuguese (these are the available modules currently), click over to <a href="http://www.duolingo.com">Duolingo</a>, you'll thank me later.</p>

<p>Oh, did I mention it's absolutely free?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning, muscle memory, typing]]></title>
    <link href="http://www.tusharsaxena.com/blog/2013/01/20/learning-muscle-memory-typing/"/>
    <updated>2013-01-20T16:39:00-05:00</updated>
    <id>http://www.tusharsaxena.com/blog/2013/01/20/learning-muscle-memory-typing</id>
    <content type="html"><![CDATA[<p>Going through Zed Shaw's <a href="http://ruby.learncodethehardway.org/book/">Learn Ruby the Hard Way</a>, I now recognize the importance of typing in the context of learning to program a new language. My professional experience in software development consisted of .NET development in C#, which is extremely similar to JAVA in syntax. So, upon encountering Ruby syntax elements such as pipes '|', typing the code becomes slow due to a lack of practice, which impedes and constricts thinking.</p>

<p>```ruby Exercise 12: Libraries http://ruby.learncodethehardway.org/book/ex12.html Source Article</p>

<p>require 'open-uri'</p>

<p>open("http://www.ruby-lang.org/en") do |f|
  f.each_line {|line| p line}
  puts f.base_uri         # &lt;URI::HTTP:0x40e6ef2 URL:http://www.ruby-lang.org/en/>
  puts f.content_type     # "text/html"
  puts f.charset          # "iso-8859-1"
  puts f.content_encoding # []
  puts f.last_modified    # Thu Dec 05 02:45:02 UTC 2002
end
```
Typing code like the excerpt above has developed muscle memory for me, and made me think of solutions faster, just as Zed said it would.</p>

<p>Happy typing!</p>
]]></content>
  </entry>
  
</feed>
